---
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";
import Cart from "../components/Cart.jsx";
import CartShow from "./CartShow";
const { navbarChange, products } = Astro.props;
const navLogo = "/images/PhoenixOfAlexandrialogo.png";
---

<header
  id="navHeader"
  class="fixed inset-0 bottom-auto bg-white md:bg-white/80 md:backdrop-blur-md z-10 border-b border-black shadow-xl pointer-events-auto"
>
  <nav
    id="nav"
    class="flex justify-between items-center px-3 md:px-1 h-24 md:h-36"
  >
    <a class="h-full shrink" href="/" aria-label="Homepage">
      <img
        class="h-full py-2 md:py-5 md:pl-8 pr-3 shrink"
        alt=""
        src={navLogo}
      />
    </a>
    

    <ul
      id="primary-navigation"
      class="ml-auto md:gap-8 lg:gap-16 md:pr-10 translate-x-full md:translate-x-0 bg-black/70 md:bg-transparent fixed top-0 bottom-0 left-0 sm:left-1/3 right-0 md:flex flex-col md:relative md:inset-0 md:flex-row pt-24 md:pt-0 place-items-center transition border border-neutral-500 md:border-0 rounded-l-3xl opacity-0 md:opacity-100 backdrop-blur-lg md:backdrop-blur-none overflow-y-scrol md:overflow-y-visible overflow-x-hidden md:overflow-x-visible z-10"
    >
      <li class="navLi delay-75 md:hidden"><a id="first" href="/">Home</a></li>
      <li class="navLi delay-100">
        <a id="first" href="/about">About</a>
      </li>

      <li class="navLi delay-200 group flex-col">
        <a href="/services">Services</a>
      </li>

      <li class="navLi delay-200 group flex-col">
        <a href="/store">Store</a>
      </li>

      <li class="navLi delay-250">
        <a href="/contact">Contact</a>
      </li>
    </ul>
    <CartShow client:load>
      <Icon class="w-10 max-w-xs my-auto pointer-events-none" name="clarity:shopping-cart-line" />
    </CartShow>
    <button
      role="navigation"
      aria-label="toggle Navigation"
      aria-controls="primary-navigation"
      aria-expanded="false"
      id="hamburgerButton"
      class="block md:hidden z-20"
      ><span class="sr-only">Menu</span>
      <svg
        id="hamburgerSvg"
        class="pointer-events-none"
        width="64"
        height="64"
        viewBox="0 0 100 100"
      >
        <path
          class="line line1"
          d="M 20,29.000046 H 80.000231 C 80.000231,29.000046 94.498839,28.817352 94.532987,66.711331 94.543142,77.980673 90.966081,81.670246 85.259173,81.668997 79.552261,81.667751 75.000211,74.999942 75.000211,74.999942 L 25.000021,25.000058"
        ></path>
        <path class="line line2" d="M 20,50 H 80"></path>
        <path
          class="line line3"
          d="M 20,70.999954 H 80.000231 C 80.000231,70.999954 94.498839,71.182648 94.532987,33.288669 94.543142,22.019327 90.966081,18.329754 85.259173,18.331003 79.552261,18.332249 75.000211,25.000058 75.000211,25.000058 L 25.000021,74.999942"
        ></path>
      </svg>
    </button>
    
  </nav>
  <!-- <Cart products={products}  client:load/> -->
</header>

<style>
  /* #hamburgerButton[aria-expanded="true"] ~ ul,
  #hamburgerButton[aria-expanded="true"] ~ ul  .navLi {
    @apply translate-x-0 opacity-100 visible text-white md:text-black;
  } */
  ul:has(~ #hamburgerButton[aria-expanded="true"]), ul:has(~ #hamburgerButton[aria-expanded="true"]) .navLi{
    @apply translate-x-0 opacity-100 visible text-white md:text-black;
  } 
 
  .navLi {
    @apply text-white md:text-black bg-black/20 hover:bg-orange-700/80 focus:bg-orange-700/50 md:hover:bg-transparent md:focus:bg-transparent md:hover:text-orange-500 md:focus:text-orange-500  md:bg-transparent md:py-0 border md:border-0 border-x-0 border-y-neutral-700 text-right text-3xl md:text-xl font-bold  md:delay-0 transition-none;
  }
  .navLi a, .navLi button{
    @apply block py-8 px-5
  }
  #hamburgerSvg {
    @apply stroke-black;
  }
  #hamburgerButton[aria-expanded="true"] #hamburgerSvg {
    @apply stroke-white;
  }
</style>

<script>
  let hamburgerOpen = false;
  const hamburgerButton = document.getElementById("hamburgerButton");
  const navUl = document.querySelector("#primary-navigation");
  const navItems = document.querySelectorAll(".navLi>a");
  const hamburgerSvg = document.getElementById("hamburgerSvg");
  const body = document.querySelector("body");
  const dropdowns = document.querySelectorAll(".navDropBtn");

  //hamburgerButton.addEventListener("click", handleClick);
  document.addEventListener("keydown", handleKeydown);
  document.addEventListener("click", handleClick);

  function toggleHamburger(close = true) {
    //toggle aria-expanded attribute
    if (close || hamburgerButton.ariaExpanded == "true") {
      dropdowns.forEach((dropdown) => {
        dropdown.ariaExpanded = "false";
      });
      hamburgerButton.ariaExpanded = "false";
      hamburgerSvg.classList.remove("opened");
      body.classList.remove("overflow-y-hidden");

      // navItems.forEach((li, i) => {
      //   li.setAttribute("tabindex", "-1");
      //   li.setAttribute("visibility", "hidden");
      // });
    } else {
      hamburgerButton.ariaExpanded = "true";
      hamburgerSvg.classList.add("opened");
      body.classList.add("overflow-y-hidden");
      navItems.forEach((li, i) => {
        li.setAttribute("tabindex", "0");
        li.setAttribute("visibility", "visible");
      });

      document.getElementById("first").focus();
    }
  }
  function toggleDropdown(e, close) {
    let dropDownBtn = e.target;
    //let navDropLi = dropDownBtn.parentElement;
    //toggle aria-expanded attribute
    if (close || dropDownBtn.ariaExpanded == "true") {
      dropDownBtn.ariaExpanded = "false";
    } else {
      dropDownBtn.ariaExpanded = "true";
    }
  }

  //if escape is pressed, force close the menu
  function handleKeydown(e) {
    if (e.key === "Escape") {
      toggleHamburger(true);
    }
  }

  function handleClick(e, close = false) {
    if (e.target.id !== "hamburgerButton") {
      close = true;
    }
    if (!e.target.classList.contains("navDropBtn")) {
      toggleHamburger(close);
    }
    //   if (e.target.classList.contains('navDropdown')){
    //   toggleDropdown(e.target, close);
    // }
  }

  window.onresize = () => toggleHamburger(true);
  const dropDownBtns = document.querySelectorAll("button.navDropBtn");
  dropDownBtns.forEach((button) => {
    button.addEventListener("click", toggleDropdown);
  });
</script>

<script>
  //navbar change intersection observer
  const threshold = 0.2;
  const rootMargin = "-20% 0% 0% 0%";
  const heroSection = document.querySelector("#top");
  const navbar = document.querySelector("#nav");

  const heroObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          navbar.classList.add("navChange");
        } else {
          navbar.classList.remove("navChange");
        }
      });
    },
    { threshold: threshold, rootMargin: rootMargin }
  );
  if (heroSection) {
    heroObserver.observe(heroSection);
  } else {
    navbar.classList.add("navChange");
  }
</script>
